#!/usr/bin/env bash
# Pre-push hook for NixOS configuration repository
# This hook runs comprehensive checks before pushing to remote

set -euo pipefail

echo "🚀 Running pre-push checks..."

# Read the remote and URL from stdin (git pre-push hook protocol)
remote="$1"
url="$2"

# Check if we're in a Nix environment
if ! command -v nix >/dev/null 2>&1; then
    echo "❌ Nix is not available. Please run from within a Nix environment."
    exit 1
fi

# Run comprehensive Nix flake check including builds
echo "🏗️  Running full Nix flake check (including builds)..."
if ! nix flake check; then
    echo "❌ Nix flake check failed"
    exit 1
fi

# Build the NixOS configuration to ensure it's valid
echo "🔧 Building NixOS configuration..."
if ! nix build .#nixosConfigurations.nixos.config.system.build.toplevel --no-link; then
    echo "❌ NixOS configuration build failed"
    exit 1
fi

# Build Home Manager configuration if it exists
echo "🏠 Building Home Manager configuration..."
if ! nix build .#homeConfigurations.awfixer@nixos.activationPackage --no-link 2>/dev/null; then
    echo "⚠️  Home Manager configuration not found or failed to build"
fi

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "❌ You have uncommitted changes. Please commit them before pushing."
    exit 1
fi

# Verify documentation builds if VitePress is available
if [ -d "docs" ] && [ -f "docs/package.json" ]; then
    echo "📚 Checking documentation build..."
    cd docs
    if command -v npm >/dev/null 2>&1; then
        if ! npm run build >/dev/null 2>&1; then
            echo "❌ Documentation build failed"
            cd ..
            exit 1
        fi
    fi
    cd ..
fi

# Check for security issues
echo "🔐 Running security checks..."

# Check for exposed secrets in commits being pushed
git rev-list --reverse HEAD@{upstream}..HEAD 2>/dev/null | while read -r commit; do
    echo "Checking commit $commit for secrets..."
    if git show "$commit" | grep -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" >/dev/null 2>&1; then
        echo "❌ Potential secret found in commit $commit"
        exit 1
    fi
done

# Check that sensitive files aren't being tracked
sensitive_files=(".env" "*.key" "*.pem" "*.p12" "*.pfx" "id_rsa" "id_ed25519")
for pattern in "${sensitive_files[@]}"; do
    if git ls-files "$pattern" | grep -q .; then
        echo "❌ Sensitive file pattern '$pattern' found in repository"
        exit 1
    fi
done

# Validate flake inputs are reasonable (not pinned to random commits)
echo "📋 Validating flake inputs..."
if nix flake metadata --json | jq -r '.locks.nodes[].locked | select(.type == "github") | .rev' | grep -E '^[a-f0-9]{40}$' | wc -l | grep -q '^[5-9]'; then
    echo "⚠️  Many inputs are pinned to specific commits - consider using stable releases"
fi

# Check that the main branch is up to date (if pushing to main)
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" = "main" ] && [ "$remote" = "origin" ]; then
    echo "🔄 Checking if main branch is up to date..."
    git fetch origin main >/dev/null 2>&1 || true
    if git rev-list HEAD..origin/main --count | grep -q '^[1-9]'; then
        echo "❌ Your main branch is behind origin/main. Please pull the latest changes."
        exit 1
    fi
fi

echo "✅ All pre-push checks passed! Safe to push to $remote."